import Nav from "@/components/nav.jsx"
import Script from 'next/script';

import Head from 'next/head'

import { useApp } from '@/context/app'
import { useSpotify } from '@/context/spotify'
import { useState, useEffect } from 'react'

import { getRefreshAccessToken } from '@/utils/spotify'

export default function Layout({ children }) {
  const { theme } = useApp();
  const {
    setDeviceId,
    setAuthorized,

    accessToken,
    setAccessToken,

    refreshToken,

    spotifyPlayer,
    setSpotifyPlayer,

    setSpotifyState,
  } = useSpotify();

  const [themeClass, setThemeClass] = useState('');
  const [spotifyMounted, setSpotifyMounted] = useState(false)

  useEffect(() => {
    if (spotifyMounted && accessToken.length > 0) {
      const newPlayer = (new Spotify.Player({
        name: 'Spotify DJ.',
        getOAuthToken: (cb) => { cb(accessToken); },
        volume: .5
      }));
      setSpotifyPlayer(newPlayer);
    }

  }, [spotifyMounted, accessToken]);

  useEffect(() => {
    if (spotifyPlayer) {
      console.log('setSpotifyPlayer', spotifyPlayer);
      spotifyPlayer.addListener('ready', (spotifyReady));
      spotifyPlayer.addListener('not_ready', (spotifyOffline));
      spotifyPlayer.addListener('player_state_changed', (spotifyStateChanged));

      spotifyPlayer.addListener('account_error', (spotifyAccountError));
      spotifyPlayer.addListener('playback_error', (spotifyPlaybackError));
      spotifyPlayer.addListener('autoplay_failed', (spotifyAutoplayFailed));
      spotifyPlayer.addListener('initialization_error', (spotifyInitializationError));
      spotifyPlayer.addListener('authentication_error', (spotifyAuthenticationError));
      spotifyPlayer.connect();
    }

    return () => {
      if (spotifyPlayer) {
        console.log('player disconnected');
        spotifyPlayer.disconnect();
      }
    };
  }, [spotifyPlayer]);

  const spotifyReady = ({ device_id }) => {
    setDeviceId(device_id);
  }

  const spotifyStateChanged = (state) => {
    setSpotifyState(state);
  }

  const spotifyOffline = () => {
    console.log('spotifyOffline');
  }

  const spotifyAutoplayFailed = (state) => {
    console.log('Autoplay is not allowed by the browser autoplay rules');
  }

  const spotifyPlaybackError = ({ message }) => {
    console.log('spotifyPlaybackError');
  }

  const spotifyInitializationError = ({ message }) => {
    console.error('Init Error:', message);
  }

  const spotifyAuthenticationError = ({ message }) => {
    setAuthorized({ state: false, message: message });

    console.log('refresh??');
    // getRefreshAccessToken().then((response: any) => {
    // console.log(response);
    //     if (response.status === 200) {
    // setAccessToken(response.data.access_token);
    //       console.log('Token Refreshed', );
    //     }
    //   }).catch((err: any) => {
    //     console.log('err', err);
    //   });
  }

  const spotifyAccountError = ({ message }) => {
    console.log('spotifyAccountError');
  }

  useEffect(() => {
    setThemeClass(theme.darkMode ? 'theme-dark' : 'theme-light');
  }, [theme]);

  return (
    <>
      <Head>
        <link rel="icon" href="/favicon.ico" />
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0,user-scalable=0" />
      </Head>
      <div className={themeClass}>
        <Nav />
        {/* <h3>deviceId: {deviceId}</h3> */}
        {/* {typeof spotifyPlayer} */}
        {children}
      </div>
      <Script id="spotify-player" strategy="lazyOnload" type="text/javascript" async={true} defer={true} src="https://sdk.scdn.co/spotify-player.js" onReady={() => { setSpotifyMounted(true) }} />
    </>
  );
};