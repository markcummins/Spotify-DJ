import Head from 'next/head'
import Script from 'next/script';

import { useApp } from '@/context/app'
import { useSpotify } from '@/context/spotify'
import { useState, useEffect } from 'react'

import styles from '@/styles/Layout.module.css'

export default function Layout({ children }) {
  const { theme } = useApp();
  const {
    setDeviceId,
    setAuthorized,

    accessToken,
    setAccessToken,

    accessTokenExpiry,
    setAccessTokenExpiry,

    refreshToken,

    spotifyPlayer,
    setSpotifyPlayer,

    setSpotifyState,

    colors,
  } = useSpotify();

  const [themeClass, setThemeClass] = useState('');

  const [spotifyMounted, setSpotifyMounted] = useState(false)
  const [spotifyPlayerConnected, setSpotifyPlayerConnected] = useState(false)
  const [cssVars, setCssVars] = useState({})

  useEffect(() => {
    if (spotifyMounted && accessToken.length > 0) {
      const newPlayer = (new Spotify.Player({
        name: 'Spotify DJ.',
        getOAuthToken: (cb) => {
          console.log('getOAuthToken');

          const currentTime = Math.floor(Date.now() / 1000);
          const accessTokenSecondsRemaining = (accessTokenExpiry - currentTime);

          if (accessTokenSecondsRemaining < 3580) {
            console.log('get refreshed OAuthToken');

            axios({
              method: 'post',
              url: `/api/refresh-token`,
              data: queryString.stringify({
                token: refreshToken,
              })
            }).then((response) => {
              console.log('getRefreshAccessToken', response);

              if (response.status === 200) {
                const currentTimeAferApiCall = Math.floor(Date.now() / 1000);

                setAccessToken(response.data.access_token);
                setAccessTokenExpiry(currentTimeAferApiCall + response.data.expires_in);

                cb(response.data.access_token);
                console.log('Token Refreshed');
              }
            }).catch((err) => {
              console.log('err', err);
            });

            return;
          }

          console.log('get existing OAuthToken');
          cb(accessToken);
        },
        volume: .5
      }));
      setSpotifyPlayer(newPlayer);
    }

  }, [spotifyMounted, accessToken]);

  useEffect(() => {
    if (!spotifyPlayerConnected && spotifyPlayer) {
      spotifyPlayer.addListener('ready', (spotifyReady));
      spotifyPlayer.addListener('not_ready', (spotifyOffline));
      spotifyPlayer.addListener('player_state_changed', (spotifyStateChanged));

      spotifyPlayer.addListener('account_error', (spotifyAccountError));
      spotifyPlayer.addListener('playback_error', (spotifyPlaybackError));
      spotifyPlayer.addListener('autoplay_failed', (spotifyAutoplayFailed));
      spotifyPlayer.addListener('initialization_error', (spotifyInitializationError));
      spotifyPlayer.addListener('authentication_error', (spotifyAuthenticationError));
      spotifyPlayer.connect();
    }

  }, [spotifyPlayer]);

  useEffect(() => {
    return () => {
      if (spotifyPlayer) {
        console.log('player disconnected');
        spotifyPlayer.disconnect();
      }
    };
  }, []);

  const spotifyReady = ({ device_id }) => {
    console.log('ready', device_id);
    setDeviceId(device_id);
  }

  const spotifyStateChanged = (state) => {
    console.log('spotifyStateChanged', state);
    setSpotifyState(state);
    setSpotifyPlayerConnected(true);
  }

  const spotifyOffline = () => {
    console.log('spotifyOffline');
  }

  const spotifyAutoplayFailed = (state) => {
    console.log('Autoplay is not allowed by the browser autoplay rules', state);
  }

  const spotifyPlaybackError = ({ message }) => {
    console.log('spotifyPlaybackError', message);
  }

  const spotifyInitializationError = ({ message }) => {
    console.error('Init Error:', message);
  }

  const spotifyAuthenticationError = ({ message }) => {
    console.log('spotifyAuthenticationError');
    setAuthorized({ state: false, message: message });
  }

  const spotifyAccountError = ({ message }) => {
    console.log('spotifyAccountError', message);
  }

  useEffect(() => {
    setThemeClass(theme.darkMode ? 'theme-dark' : 'theme-light');
  }, [theme]);

  useEffect(() => {
    console.log('colors', colors);
    if (colors) {
      setCssVars({
        "--color-primary": colors.isLight
          ? '#0d1116'
          : '#c2c4c8',
        "--color-highlight": colors.hex
      });
    }
  }, [colors]);

  return (
    <>
      <Head>
        <link rel="icon" href="/ai-tunes-mini.svg" />
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0,user-scalable=0" />
      </Head>
      <div className={themeClass}>
        <main className={styles.main} style={cssVars}>
          {children}
        </main>
      </div>
      <Script id="spotify-player" strategy="lazyOnload" type="text/javascript" async={true} defer={true} src="https://sdk.scdn.co/spotify-player.js" onReady={() => { setSpotifyMounted(true) }} />
    </>
  );
};